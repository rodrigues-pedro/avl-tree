## Arquivo que cont√©m as configura√ß√µes da aplica√ß√£o
import streamlit as st
from ABB import AVL_Tree

## Configura o t√≠tulo e favicon da pagina web
st.set_page_config(
    page_title="√Årvore AVL",
    page_icon="üå≤",
)

## Caso n√£o exista uma √°rvore inicializada, inicializamos uma na sess√£o do aplicativo
if 'tree' not in st.session_state:
    st.session_state.tree = AVL_Tree()

c30, c32 = st.columns([7, 2])

# T√≠tulo da aplica√ß√£o
with c30:
    st.title("üå≤ √Årvore AVL üå≤")
    st.header("")

# informa√ß√µes sobre os desenvolvedores
with c32:
    with st.expander("‚ÑπÔ∏è - About this app", expanded=False):

        st.write(
            """     
    - Desenvolvedores: 
        - Arthur Monteiro
        - Mateus Kalleb
        - Pedro Manuel Rodrigues
    - Algoritmo e Estrutura de Dados 2
    - Institui√ß√£o: UFG
    - Discente:  
        - Wanderley Alencar
            """
        )

        st.markdown("")

cf, cp = st.columns([2,7])
## formul√°rio que busca as informa√ß√µes necess√°rias para testar as funcionalidades
with cf:
    with st.form(key="my_form"):
        # Usu√°rio escolhe a opera√ß√£o
        operacao = st.radio(
            "Qual opera√ß√£o voc√™ deseja fazer?",
            ["Inserir N√≥", "Remover N√≥", "Buscar um N√≥", "Deletar a √Årvore"],
            # help="",
        )

        # Usu√°rio aponta a chave do n√≥ onde ele pretende fazer a opera√ß√£o
        key = st.number_input(
            "Chave do N√≥",
            min_value=-100,
            max_value= 100,
            value=0
           # help="",
        )

        submit_button = st.form_submit_button(label="Atualizar √Årvore")

if not submit_button:
    st.stop()

# Opera√ß√£o escolhida √© feita no n√≥ de acordo com o que o usu√°rio solicitou
with cp:
    try:
        if operacao == "Inserir N√≥":
            st.session_state.tree.incert_node(key)
            
        elif operacao == "Remover N√≥":
            st.session_state.tree.delete_node(key)

        elif operacao ==  "Buscar um N√≥":
            node = st.session_state.tree.search(key)
            st.write(node)
            
        elif operacao ==  "Deletar a √Årvore":
            del st.session_state.tree
            st.session_state.tree = AVL_Tree()
    
        st.plotly_chart(st.session_state.tree.plot_tree())
    except Exception as E:
        st.write(E)
